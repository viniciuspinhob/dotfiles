# If you come from bash you might have to change your $PATH.
# export PATH=$HOME/bin:$HOME/.local/bin:/usr/local/bin:$PATH

# Path to your Oh My Zsh installation.
export ZSH="$HOME/.oh-my-zsh"

# Set name of the theme to load --- if set to "random", it will
# load a random theme each time Oh My Zsh is loaded, in which case,
# to know which specific one was loaded, run: echo $RANDOM_THEME
# See https://github.com/ohmyzsh/ohmyzsh/wiki/Themes
ZSH_THEME="robbyrussell" # set by `omz`
# ZSH_THEME="spaceship"

# Set list of themes to pick from when loading at random
# Setting this variable when ZSH_THEME=random will cause zsh to load
# a theme from this variable instead of looking in $ZSH/themes/
# If set to an empty array, this variable will have no effect.
# ZSH_THEME_RANDOM_CANDIDATES=( "robbyrussell" "agnoster" )

# Uncomment the following line to use case-sensitive completion.
# CASE_SENSITIVE="true"

# Uncomment the following line to use hyphen-insensitive completion.
# Case-sensitive completion must be off. _ and - will be interchangeable.
# HYPHEN_INSENSITIVE="true"

# Uncomment one of the following lines to change the auto-update behavior
# zstyle ':omz:update' mode disabled  # disable automatic updates
# zstyle ':omz:update' mode auto      # update automatically without asking
# zstyle ':omz:update' mode reminder  # just remind me to update when it's time

# Uncomment the following line to change how often to auto-update (in days).
# zstyle ':omz:update' frequency 13

# Uncomment the following line if pasting URLs and other text is messed up.
# DISABLE_MAGIC_FUNCTIONS="true"

# Uncomment the following line to disable colors in ls.
# DISABLE_LS_COLORS="true"

# Uncomment the following line to disable auto-setting terminal title.
# DISABLE_AUTO_TITLE="true"

# Uncomment the following line to enable command auto-correction.
# ENABLE_CORRECTION="true"

# Uncomment the following line to display red dots whilst waiting for completion.
# You can also set it to another string to have that shown instead of the default red dots.
# e.g. COMPLETION_WAITING_DOTS="%F{yellow}waiting...%f"
# Caution: this setting can cause issues with multiline prompts in zsh < 5.7.1 (see #5765)
# COMPLETION_WAITING_DOTS="true"

# Uncomment the following line if you want to disable marking untracked files
# under VCS as dirty. This makes repository status check for large repositories
# much, much faster.
# DISABLE_UNTRACKED_FILES_DIRTY="true"

# Uncomment the following line if you want to change the command execution time
# stamp shown in the history command output.
# You can set one of the optional three formats:
# "mm/dd/yyyy"|"dd.mm.yyyy"|"yyyy-mm-dd"
# or set a custom format using the strftime function format specifications,
# see 'man strftime' for details.
# HIST_STAMPS="mm/dd/yyyy"

# Would you like to use another custom folder than $ZSH/custom?
# ZSH_CUSTOM=/path/to/new-custom-folder

# Which plugins would you like to load?
# Standard plugins can be found in $ZSH/plugins/
# Custom plugins may be added to $ZSH_CUSTOM/plugins/
# Example format: plugins=(rails git textmate ruby lighthouse)
# Add wisely, as too many plugins slow down shell startup.
plugins=(
	git
	zsh-autosuggestions
	zsh-syntax-highlighting
	fast-syntax-highlighting
	zsh-autocomplete
	thefuck
	kubectl
)

source $ZSH/oh-my-zsh.sh

# User configuration

# export MANPATH="/usr/local/man:$MANPATH"

# You may need to manually set your language environment
# export LANG=en_US.UTF-8

# Preferred editor for local and remote sessions
# if [[ -n $SSH_CONNECTION ]]; then
#   export EDITOR='vim'
# else
#   export EDITOR='nvim'
# fi

# Compilation flags
# export ARCHFLAGS="-arch $(uname -m)"

# Set personal aliases, overriding those provided by Oh My Zsh libs,
# plugins, and themes. Aliases can be placed here, though Oh My Zsh
# users are encouraged to define aliases within a top-level file in
# the $ZSH_CUSTOM folder, with .zsh extension. Examples:
# - $ZSH_CUSTOM/aliases.zsh
# - $ZSH_CUSTOM/macos.zsh
# For a full list of active aliases, run `alias`.
#
# Example aliases
# alias zshconfig="mate ~/.zshrc"
# alias ohmyzsh="mate ~/.oh-my-zsh"
export AWS_CA_BUNDLE="/Users/Shared/aws_crt/Zscaler_root.crt"

eval "$(starship init zsh)"

### MANAGED BY RANCHER DESKTOP START (DO NOT EDIT)
export PATH="/Users/fo126029/.rd/bin:$PATH"
### MANAGED BY RANCHER DESKTOP END (DO NOT EDIT)

# Created by `pipx` on 2024-10-28 19:21:00 (?????)
export PATH="$PATH:~/.local/bin"

# Unix General
alias shn="sudo hostname -s 127.0.0.1"
alias cdd="cd  ~/Developer"
alias cddd="cd  ~/Developer/dede"
alias cdh="cd ~"

# Development
## Python
alias create_pyenv39="python3.9 -m venv .venv"
alias create_pyenv="python3 -m venv .venv"
alias activate="source .venv/bin/activate"
alias activate39="source ~/Developer/tools/venv3_9/bin/activate"
alias rm_pycache="find . | grep -E '(/__pycache__$|\.pyc$|\.pyo$)' | xargs rm -rf"
alias rmpc="find . | grep -E '(/__pycache__$|\.pyc$|\.pyo$)' | xargs rm -rf"
# Git & code formating
alias run_flake8="python3 -m flake8 --exclude .git,cicd/,__pycache__,.hg,.mypy_cache,.tox,.venv,venv,_build,buck-out,build,dist --max-line-length 120"
alias pregit="gaa & pre-commit run"
alias pg="pregit"
alias gmjl="gitmoji -l"
alias gmjs="gitmoji -s"
alias gmj="gitmoji -c"
alias gmp="gaa && gmj && git push"
# Pycharm IDE
alias pycharm="open -na 'PyCharm CE.app' --args ."
alias pc="pycharm"
# Default Environment Variables
alias awsenvs="printenv | grep AWS"
alias sparkenvs="printenv | grep SPARK"
# Docker
alias d='docker'
# kubernets
alias k='kubectl'
alias kgp="kubectl get pods"
alias klt="k logs --tail=-1"
# Parquet cli
alias pq='parquet'
alias pqm='parquet meta'
alias pqh='parquet head'
# Tools
alias zup='source ~/.zshrc'
alias zconf='zed ~/.zshrc'
alias sconf='zed ~/.config/starship.toml'
alias toolbox='open ~/Developer/tools'
alias cdtoolbox='cd ~/Developer/tools'
alias fzp="fzf --preview 'cat {}'"
alias fzc='cat $(fzf)'
alias cdobsidian='cd ~/Documents/obsidian/'
alias zidian='zed ~/Documents/obsidian/'

# Inter
## DEDE Framework
alias dede_tools="python3.9 -m dede_tools"
alias run_dede="~/Developer/tools/run_dede.sh"
## AWS
alias uat-data="unset AWS_VAULT && aws-vault exec uat-data"
alias prd-data="unset AWS_VAULT && aws-vault exec prd-data"
## K8s
# Switch k8s contexts
typeset -A kconf_contexts
kconf_contexts=(
    [local]="rancher-desktop"
    [bruat]="arn:aws:eks:us-east-1:020162860002:cluster/EKSDT-UAT-CLUSTER-V2"
    [brprd]="arn:aws:eks:sa-east-1:812128893680:cluster/EKSDT-PRD-CLUSTER-V2"
    [ubuat]="arn:aws:eks:us-east-1:222634392584:cluster/USBI-UAT-CLUSTER-DATA"
)
kconf() {
    if [[ -n "${kconf_contexts[$1]}" ]]; then
        kubectl config use-context "${kconf_contexts[$1]}"
    else
        echo "Usage: kconf <context>"
        echo "Available contexts:"
        for context in ${(k)kconf_contexts}; do
            echo "  $context - ${kconf_contexts[$context]}"
        done
        return 1
    fi
}


eval $(thefuck --alias)
# eval "$(direnv hook zsh)"
# Set up fzf key bindings and fuzzy completion
# source <(fzf --zsh)


# Node
export PATH="/opt/homebrew/opt/node@22/bin:$PATH"
export LDFLAGS="-L/opt/homebrew/opt/node@22/lib"
export CPPFLAGS="-I/opt/homebrew/opt/node@22/include"


#THIS MUST BE AT THE END OF THE FILE FOR SDKMAN TO WORK!!!
export SDKMAN_DIR="$HOME/.sdkman"
[[ -s "$HOME/.sdkman/bin/sdkman-init.sh" ]] && source "$HOME/.sdkman/bin/sdkman-init.sh"
# IAC
export PATH=$PATH:$HOME/.iac/bin
[[ $commands[kubectl] ]] && source <(kubectl completion zsh)

## Spark
# Default Spark version
export SPARK_HOME="~/Developer/tools/spark-3.5.1-bin-hadoop3"
# Function to switch Spark versions
typeset -A spark_versions
spark_versions=(
    [331]="$HOME/Developer/tools/spark-3.3.1-bin-hadoop3"
    [351]="$HOME/Developer/tools/spark-3.5.1-bin-hadoop3"
    [353]="$HOME/Developer/tools/spark-3.5.3-bin-hadoop3"
    [356]="$HOME/Developer/tools/spark-3.5.6-bin-hadoop3"
)
vspark() {
    if [[ -n "${spark_versions[$1]}" ]]; then
        export SPARK_HOME="${spark_versions[$1]}"
        echo "Spark version set to: $1 ($SPARK_HOME)"
    else
        echo "Usage: vspark <version>"
        echo "Available Spark versions:"
        for version in ${(k)spark_versions}; do
            echo "  $version - ${spark_versions[$version]}"
        done
        return 1
    fi
}
export PYENV_ROOT="$HOME/.pyenv"
[[ -d $PYENV_ROOT/bin ]] && export PATH="$PYENV_ROOT/bin:$PATH"
eval "$(pyenv init - zsh)"

export PATH="/Users/fo126029/.local/bin:$PATH"
